"use strict";
;
;
function myAsyncFunction() {
    return Promise.resolve({ integerValue: 8, stringValue: "String 8" });
}
function registerMyAppFunctions(blazor) {
    blazor.registerFunction("MyAsyncFunc", myAsyncFunction);
}
function invokerTests() {
    console.log('Starting invocations.');
    console.log('Invoking parameterless method.');
    Blazor.platform.invokeDotNetMethod({
        Type: {
            Assembly: "StandaloneApp",
            TypeName: "StandaloneApp.Infrastructure.InvokerTests",
            TypeArguments: {}
        },
        Method: {
            Name: "ParameterlessMethod",
            TypeArguments: {},
            ParameterTypes: []
        }
    });
    console.log('Invoking parameterless value returning method.');
    var result = Blazor.platform.invokeDotNetMethod({
        Type: {
            Assembly: "StandaloneApp",
            TypeName: "StandaloneApp.Infrastructure.InvokerTests",
            TypeArguments: {}
        },
        Method: {
            Name: "ParameterlessReturningMethod",
            TypeArguments: {},
            ParameterTypes: []
        }
    });
    if (result !== null) {
        console.log("integerValue: '" + result.integerValue + "'");
        console.log("stringValue: '" + result.stringValue + "'");
    }
    Blazor.platform.invokeDotNetMethod({
        Type: {
            Assembly: "StandaloneApp",
            TypeName: "StandaloneApp.Infrastructure.InvokerTests",
            TypeArguments: {}
        },
        Method: {
            Name: "SingleParameterMethod",
            TypeArguments: {},
            ParameterTypes: [{
                    Assembly: "StandaloneApp",
                    TypeName: "StandaloneApp.Infrastructure.MethodParameter",
                    TypeArguments: {}
                }]
        }
    }, { Argument1: { integerValue: 3, stringValue: "String 3" } });
    Blazor.platform.invokeDotNetMethodAsync({
        Type: {
            Assembly: "StandaloneApp",
            TypeName: "StandaloneApp.Infrastructure.InvokerTests",
            TypeArguments: {}
        },
        Method: {
            Name: "ParameterlessMethodAsync",
            TypeArguments: {},
            ParameterTypes: []
        }
    }).then(function () { return console.log('After resolving task'); });
    Blazor.platform.invokeDotNetMethodAsync({
        Type: {
            Assembly: "StandaloneApp",
            TypeName: "StandaloneApp.Infrastructure.InvokerTests",
            TypeArguments: {}
        },
        Method: {
            Name: "SingleParameterMethodAsync",
            TypeArguments: {},
            ParameterTypes: [{
                    Assembly: "StandaloneApp",
                    TypeName: "StandaloneApp.Infrastructure.MethodParameter",
                    TypeArguments: {}
                }]
        }
    }, { Argument1: { integerValue: 6, stringValue: "String 6" } })
        .then(function () { return console.log('After resolving task with parameter!'); });
    var asyncPromise = Blazor.platform.invokeDotNetMethodAsync({
        Type: {
            Assembly: "StandaloneApp",
            TypeName: "StandaloneApp.Infrastructure.InvokerTests",
            TypeArguments: {}
        },
        Method: {
            Name: "ParameterlessReturningMethodAsync",
            TypeArguments: {},
            ParameterTypes: []
        }
    }).then(function (res) {
        if (res !== null) {
            console.log("integerValue: '" + res.integerValue + "'");
            console.log("stringValue: '" + res.stringValue + "'");
        }
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zY3JpcHRzL2pzL3Rlc3RzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUEwQkMsQ0FBQztBQU1ELENBQUM7QUFJRjtJQUNFLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLFlBQVksRUFBRSxDQUFDLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUM7QUFDdkUsQ0FBQztBQUVELGdDQUFnQyxNQUFlO0lBQzdDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLEVBQUUsZUFBZSxDQUFDLENBQUM7QUFDMUQsQ0FBQztBQUVEO0lBQ0ksT0FBTyxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0lBQ3JDLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztJQUM5QyxNQUFNLENBQUMsUUFBUSxDQUFDLGtCQUFrQixDQUM5QjtRQUNJLElBQUksRUFBRTtZQUNGLFFBQVEsRUFBRSxlQUFlO1lBQ3pCLFFBQVEsRUFBRSwyQ0FBMkM7WUFDckQsYUFBYSxFQUFFLEVBQUU7U0FDcEI7UUFDRCxNQUFNLEVBQUU7WUFDSixJQUFJLEVBQUUscUJBQXFCO1lBQzNCLGFBQWEsRUFBRSxFQUFFO1lBQ2pCLGNBQWMsRUFBRSxFQUFFO1NBQ3JCO0tBQ0osQ0FBQyxDQUFDO0lBRVAsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnREFBZ0QsQ0FBQyxDQUFDO0lBQzlELElBQUksTUFBTSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsa0JBQWtCLENBQzNDO1FBQ0ksSUFBSSxFQUFFO1lBQ0YsUUFBUSxFQUFFLGVBQWU7WUFDekIsUUFBUSxFQUFFLDJDQUEyQztZQUNyRCxhQUFhLEVBQUUsRUFBRTtTQUNwQjtRQUNELE1BQU0sRUFBRTtZQUNKLElBQUksRUFBRSw4QkFBOEI7WUFDcEMsYUFBYSxFQUFFLEVBQUU7WUFDakIsY0FBYyxFQUFFLEVBQUU7U0FDckI7S0FDSixD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SW5zdGFuY2U7XHJcbiAgICBNZXRob2Q6IE1ldGhvZEluc3RhbmNlO1xyXG4gICAgQXN5bmM/OiB7IFJlc29sdmVJZDogc3RyaW5nLCBSZWplY3RJZDogc3RyaW5nLCBGdW5jdGlvbk5hbWU6IHN0cmluZyB9XHJcbn1cclxuXHJcbmludGVyZmFjZSBNZXRob2RJbnN0YW5jZSB7XHJcbiAgICBOYW1lOiBzdHJpbmc7XHJcbiAgICBUeXBlQXJndW1lbnRzOiB7IFtrZXk6IHN0cmluZ106IFR5cGVJbnN0YW5jZSB9XHJcbiAgICBQYXJhbWV0ZXJUeXBlczogVHlwZUluc3RhbmNlW107XHJcbn1cclxuXHJcbmludGVyZmFjZSBUeXBlSW5zdGFuY2Uge1xyXG4gICAgQXNzZW1ibHk6IHN0cmluZztcclxuICAgIFR5cGVOYW1lOiBzdHJpbmc7XHJcbiAgICBUeXBlQXJndW1lbnRzOiB7IFtrZXk6IHN0cmluZ106IFR5cGVJbnN0YW5jZSB9O1xyXG59XHJcblxyXG5pbnRlcmZhY2UgRG90bmV0TWV0aG9kQXJndW1lbnRzTGlzdCB7XHJcbiAgICBBcmd1bWVudDE/OiBhbnk7XHJcbiAgICBBcmd1bWVudDI/OiBhbnk7XHJcbn1cclxuXHJcbmludGVyZmFjZSBJQmxhem9yIHtcclxuICBwbGF0Zm9ybTogSVBsYXRmb3JtXHJcbiAgcmVnaXN0ZXJGdW5jdGlvbjogKG5hbWU6IHN0cmluZywgaW1wbGVtZW50YXRpb246IEZ1bmN0aW9uKSA9PiB2b2lkO1xyXG59O1xyXG5cclxuXHJcbmludGVyZmFjZSBJUGxhdGZvcm0ge1xyXG4gICAgaW52b2tlRG90TmV0TWV0aG9kPFQ+KG1ldGhvZE9wdGlvbnM6IE1ldGhvZE9wdGlvbnMsIG1ldGhvZEFyZ3M/OiBEb3RuZXRNZXRob2RBcmd1bWVudHNMaXN0KTogVCB8IG51bGw7XHJcbiAgICBpbnZva2VEb3ROZXRNZXRob2RBc3luYzxUPihtZXRob2RPcHRpb25zOiBNZXRob2RPcHRpb25zLCBtZXRob2RBcmdzPzogRG90bmV0TWV0aG9kQXJndW1lbnRzTGlzdCk6IFByb21pc2U8VCB8IG51bGw+O1xyXG59O1xyXG5cclxuZGVjbGFyZSBjb25zdCBCbGF6b3I6IElCbGF6b3I7XHJcblxyXG5mdW5jdGlvbiBteUFzeW5jRnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7IGludGVnZXJWYWx1ZTogOCwgc3RyaW5nVmFsdWU6IFwiU3RyaW5nIDhcIiB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVnaXN0ZXJNeUFwcEZ1bmN0aW9ucyhibGF6b3I6IElCbGF6b3IpIHtcclxuICBibGF6b3IucmVnaXN0ZXJGdW5jdGlvbihcIk15QXN5bmNGdW5jXCIsIG15QXN5bmNGdW5jdGlvbik7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGludm9rZXJUZXN0cygpIHtcclxuICAgIGNvbnNvbGUubG9nKCdTdGFydGluZyBpbnZvY2F0aW9ucy4nKTtcclxuICAgIGNvbnNvbGUubG9nKCdJbnZva2luZyBwYXJhbWV0ZXJsZXNzIG1ldGhvZC4nKTtcclxuICAgIEJsYXpvci5wbGF0Zm9ybS5pbnZva2VEb3ROZXRNZXRob2QoXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBUeXBlOiB7XHJcbiAgICAgICAgICAgICAgICBBc3NlbWJseTogXCJTdGFuZGFsb25lQXBwXCIsXHJcbiAgICAgICAgICAgICAgICBUeXBlTmFtZTogXCJTdGFuZGFsb25lQXBwLkluZnJhc3RydWN0dXJlLkludm9rZXJUZXN0c1wiLFxyXG4gICAgICAgICAgICAgICAgVHlwZUFyZ3VtZW50czoge31cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgTWV0aG9kOiB7XHJcbiAgICAgICAgICAgICAgICBOYW1lOiBcIlBhcmFtZXRlcmxlc3NNZXRob2RcIixcclxuICAgICAgICAgICAgICAgIFR5cGVBcmd1bWVudHM6IHt9LFxyXG4gICAgICAgICAgICAgICAgUGFyYW1ldGVyVHlwZXM6IFtdXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICBjb25zb2xlLmxvZygnSW52b2tpbmcgcGFyYW1ldGVybGVzcyB2YWx1ZSByZXR1cm5pbmcgbWV0aG9kLicpO1xyXG4gICAgbGV0IHJlc3VsdCA9IEJsYXpvci5wbGF0Zm9ybS5pbnZva2VEb3ROZXRNZXRob2Q8eyBpbnRlZ2VyVmFsdWU6IG51bWJlciwgc3RyaW5nVmFsdWU6IHN0cmluZyB9PihcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFR5cGU6IHtcclxuICAgICAgICAgICAgICAgIEFzc2VtYmx5OiBcIlN0YW5kYWxvbmVBcHBcIixcclxuICAgICAgICAgICAgICAgIFR5cGVOYW1lOiBcIlN0YW5kYWxvbmVBcHAuSW5mcmFzdHJ1Y3R1cmUuSW52b2tlclRlc3RzXCIsXHJcbiAgICAgICAgICAgICAgICBUeXBlQXJndW1lbnRzOiB7fVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBNZXRob2Q6IHtcclxuICAgICAgICAgICAgICAgIE5hbWU6IFwiUGFyYW1ldGVybGVzc1JldHVybmluZ01ldGhvZFwiLFxyXG4gICAgICAgICAgICAgICAgVHlwZUFyZ3VtZW50czoge30sXHJcbiAgICAgICAgICAgICAgICBQYXJhbWV0ZXJUeXBlczogW11cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIGlmIChyZXN1bHQgIT09IG51bGwpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhgaW50ZWdlclZhbHVlOiAnJHtyZXN1bHQuaW50ZWdlclZhbHVlfSdgKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhgc3RyaW5nVmFsdWU6ICcke3Jlc3VsdC5zdHJpbmdWYWx1ZX0nYCk7XHJcbiAgICB9XHJcblxyXG4gICAgQmxhem9yLnBsYXRmb3JtLmludm9rZURvdE5ldE1ldGhvZChcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFR5cGU6IHtcclxuICAgICAgICAgICAgICAgIEFzc2VtYmx5OiBcIlN0YW5kYWxvbmVBcHBcIixcclxuICAgICAgICAgICAgICAgIFR5cGVOYW1lOiBcIlN0YW5kYWxvbmVBcHAuSW5mcmFzdHJ1Y3R1cmUuSW52b2tlclRlc3RzXCIsXHJcbiAgICAgICAgICAgICAgICBUeXBlQXJndW1lbnRzOiB7fVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBNZXRob2Q6IHtcclxuICAgICAgICAgICAgICAgIE5hbWU6IFwiU2luZ2xlUGFyYW1ldGVyTWV0aG9kXCIsXHJcbiAgICAgICAgICAgICAgICBUeXBlQXJndW1lbnRzOiB7fSxcclxuICAgICAgICAgICAgICAgIFBhcmFtZXRlclR5cGVzOiBbe1xyXG4gICAgICAgICAgICAgICAgICAgIEFzc2VtYmx5OiBcIlN0YW5kYWxvbmVBcHBcIixcclxuICAgICAgICAgICAgICAgICAgICBUeXBlTmFtZTogXCJTdGFuZGFsb25lQXBwLkluZnJhc3RydWN0dXJlLk1ldGhvZFBhcmFtZXRlclwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFR5cGVBcmd1bWVudHM6IHt9XHJcbiAgICAgICAgICAgICAgICB9XVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICB7IEFyZ3VtZW50MTogeyBpbnRlZ2VyVmFsdWU6IDMsIHN0cmluZ1ZhbHVlOiBcIlN0cmluZyAzXCIgfSB9KTtcclxuXHJcbiAgICBCbGF6b3IucGxhdGZvcm0uaW52b2tlRG90TmV0TWV0aG9kQXN5bmMoXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBUeXBlOiB7XHJcbiAgICAgICAgICAgICAgICBBc3NlbWJseTogXCJTdGFuZGFsb25lQXBwXCIsXHJcbiAgICAgICAgICAgICAgICBUeXBlTmFtZTogXCJTdGFuZGFsb25lQXBwLkluZnJhc3RydWN0dXJlLkludm9rZXJUZXN0c1wiLFxyXG4gICAgICAgICAgICAgICAgVHlwZUFyZ3VtZW50czoge31cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgTWV0aG9kOiB7XHJcbiAgICAgICAgICAgICAgICBOYW1lOiBcIlBhcmFtZXRlcmxlc3NNZXRob2RBc3luY1wiLFxyXG4gICAgICAgICAgICAgICAgVHlwZUFyZ3VtZW50czoge30sXHJcbiAgICAgICAgICAgICAgICBQYXJhbWV0ZXJUeXBlczogW11cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pLnRoZW4oKCkgPT4gY29uc29sZS5sb2coJ0FmdGVyIHJlc29sdmluZyB0YXNrJykpO1xyXG5cclxuICAgIEJsYXpvci5wbGF0Zm9ybS5pbnZva2VEb3ROZXRNZXRob2RBc3luYyhcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFR5cGU6IHtcclxuICAgICAgICAgICAgICAgIEFzc2VtYmx5OiBcIlN0YW5kYWxvbmVBcHBcIixcclxuICAgICAgICAgICAgICAgIFR5cGVOYW1lOiBcIlN0YW5kYWxvbmVBcHAuSW5mcmFzdHJ1Y3R1cmUuSW52b2tlclRlc3RzXCIsXHJcbiAgICAgICAgICAgICAgICBUeXBlQXJndW1lbnRzOiB7fVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBNZXRob2Q6IHtcclxuICAgICAgICAgICAgICAgIE5hbWU6IFwiU2luZ2xlUGFyYW1ldGVyTWV0aG9kQXN5bmNcIixcclxuICAgICAgICAgICAgICAgIFR5cGVBcmd1bWVudHM6IHt9LFxyXG4gICAgICAgICAgICAgICAgUGFyYW1ldGVyVHlwZXM6IFt7XHJcbiAgICAgICAgICAgICAgICAgICAgQXNzZW1ibHk6IFwiU3RhbmRhbG9uZUFwcFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFR5cGVOYW1lOiBcIlN0YW5kYWxvbmVBcHAuSW5mcmFzdHJ1Y3R1cmUuTWV0aG9kUGFyYW1ldGVyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgVHlwZUFyZ3VtZW50czoge31cclxuICAgICAgICAgICAgICAgIH1dXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHsgQXJndW1lbnQxOiB7IGludGVnZXJWYWx1ZTogNiwgc3RyaW5nVmFsdWU6IFwiU3RyaW5nIDZcIiB9IH0pXHJcbiAgICAgICAgLnRoZW4oKCkgPT4gY29uc29sZS5sb2coJ0FmdGVyIHJlc29sdmluZyB0YXNrIHdpdGggcGFyYW1ldGVyIScpKTtcclxuXHJcbiAgICBsZXQgYXN5bmNQcm9taXNlID0gQmxhem9yLnBsYXRmb3JtLmludm9rZURvdE5ldE1ldGhvZEFzeW5jPHsgaW50ZWdlclZhbHVlOiBudW1iZXIsIHN0cmluZ1ZhbHVlOiBzdHJpbmcgfT4oXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBUeXBlOiB7XHJcbiAgICAgICAgICAgICAgICBBc3NlbWJseTogXCJTdGFuZGFsb25lQXBwXCIsXHJcbiAgICAgICAgICAgICAgICBUeXBlTmFtZTogXCJTdGFuZGFsb25lQXBwLkluZnJhc3RydWN0dXJlLkludm9rZXJUZXN0c1wiLFxyXG4gICAgICAgICAgICAgICAgVHlwZUFyZ3VtZW50czoge31cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgTWV0aG9kOiB7XHJcbiAgICAgICAgICAgICAgICBOYW1lOiBcIlBhcmFtZXRlcmxlc3NSZXR1cm5pbmdNZXRob2RBc3luY1wiLFxyXG4gICAgICAgICAgICAgICAgVHlwZUFyZ3VtZW50czoge30sXHJcbiAgICAgICAgICAgICAgICBQYXJhbWV0ZXJUeXBlczogW11cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pLnRoZW4ocmVzID0+IHtcclxuICAgICAgICAgICAgaWYgKHJlcyAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYGludGVnZXJWYWx1ZTogJyR7cmVzLmludGVnZXJWYWx1ZX0nYCk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgc3RyaW5nVmFsdWU6ICcke3Jlcy5zdHJpbmdWYWx1ZX0nYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxufSJdfQ==