"use strict";
;
;
function invokerTests() {
    Blazor.platform.invokeDotNetMethod({
        Type: {
            Assembly: "BlazorApp.Client",
            TypeName: "BlazorApp.Client.Infrastructure.InvokerTests",
            TypeArguments: {}
        },
        Method: {
            Name: "ParameterlessMethod",
            TypeArguments: {},
            ParameterTypes: []
        }
    });
    var result = Blazor.platform.invokeDotNetMethod({
        Type: {
            Assembly: "BlazorApp.Client",
            TypeName: "BlazorApp.Client.Infrastructure.InvokerTests",
            TypeArguments: {}
        },
        Method: {
            Name: "ParameterlessReturningMethod",
            TypeArguments: {},
            ParameterTypes: []
        }
    });
    if (result !== null) {
        console.log("IntegerValue: '" + result.IntegerValue + "'");
        console.log("StringValue: '" + result.StringValue + "'");
    }
    Blazor.platform.invokeDotNetMethod({
        Type: {
            Assembly: "BlazorApp.Client",
            TypeName: "BlazorApp.Client.Infrastructure.InvokerTests",
            TypeArguments: {}
        },
        Method: {
            Name: "SingleParameterMethod",
            TypeArguments: {},
            ParameterTypes: [{
                    Assembly: "BlazorApp.Client",
                    TypeName: "BlazorApp.Client.Infrastructure.MethodParameter",
                    TypeArguments: {}
                }]
        }
    }, { Argument1: { IntegerValue: 3, StringValue: "String 3" } });
    Blazor.platform.invokeDotNetMethodAsync({
        Type: {
            Assembly: "BlazorApp.Client",
            TypeName: "BlazorApp.Client.Infrastructure.InvokerTests",
            TypeArguments: {}
        },
        Method: {
            Name: "ParameterlessMethodAsync",
            TypeArguments: {},
            ParameterTypes: []
        }
    }).then(function () { return console.log('After resolving task'); });
    Blazor.platform.invokeDotNetMethodAsync({
        Type: {
            Assembly: "BlazorApp.Client",
            TypeName: "BlazorApp.Client.Infrastructure.InvokerTests",
            TypeArguments: {}
        },
        Method: {
            Name: "SingleParameterMethodAsync",
            TypeArguments: {},
            ParameterTypes: [{
                    Assembly: "BlazorApp.Client",
                    TypeName: "BlazorApp.Client.Infrastructure.MethodParameter",
                    TypeArguments: {}
                }]
        }
    }, { Argument1: { IntegerValue: 6, StringValue: "String 6" } })
        .then(function () { return console.log('After resolving task with parameter!'); });
    var asyncPromise = Blazor.platform.invokeDotNetMethodAsync({
        Type: {
            Assembly: "BlazorApp.Client",
            TypeName: "BlazorApp.Client.Infrastructure.InvokerTests",
            TypeArguments: {}
        },
        Method: {
            Name: "ParameterlessReturningMethodAsync",
            TypeArguments: {},
            ParameterTypes: []
        }
    }).then(function (res) {
        if (res !== null) {
            console.log("IntegerValue: '" + res.IntegerValue + "'");
            console.log("StringValue: '" + res.StringValue + "'");
        }
    });
}
setTimeout(invokerTests, 10000, []);
//# sourceMappingURL=data:application/json;base64,